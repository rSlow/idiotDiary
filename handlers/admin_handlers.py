from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils.exceptions import BotBlocked

from FSM import FSMAdmin
from bot import dispatcher, bot
from orm.users import User


@dispatcher.message_handler(Text(contains="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"))
@dispatcher.message_handler(commands=["admin"])
async def main_admin(message: types.Message):
    if message.from_user.id not in bot.admins:
        await message.delete()
    else:
        kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìù", "–†–∞—Å—Å—ã–ª–∫–∞ üì®").add(
            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ ‚õî").add("‚Ü™ –ù–∞ –≥–ª–∞–≤–Ω—É—é")

        await FSMAdmin.start.set()
        await message.answer(text="–ü–∞–Ω–µ–ª—å ~–∏–¥–∏–æ—Ç–∞~ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\:",
                             reply_markup=kb,
                             parse_mode="MarkdownV2")


@dispatcher.message_handler(Text(contains="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"), state=FSMAdmin.start)
async def stop_bot(message: types.Message):
    await FSMAdmin.stop.set()
    await message.answer("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?")


@dispatcher.message_handler(Text(equals="–¥–∞"), state=FSMAdmin.stop)
async def finally_stop_bot(_):
    dispatcher.stop_polling()


@dispatcher.message_handler(Text(contains="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), state=FSMAdmin.start)
async def schedule_options(message: types.Message):
    await FSMAdmin.schedule.set()
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add("–û–±–Ω–æ–≤–∏—Ç—å —Å –ø–æ—á—Ç—ã üîÅ", "‚Ü™ –ù–∞ –≥–ª–∞–≤–Ω—É—é")
    await message.answer(text="–û–ø—Ü–∏–∏:", reply_markup=kb)


@dispatcher.message_handler(Text(contains="–†–∞—Å—Å—ã–ª–∫–∞"), state=FSMAdmin.start)
async def mailing_settings(message: types.Message):
    await FSMAdmin.mailing.set()
    await message.answer(f"–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–∞ {len(bot.users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")


@dispatcher.message_handler(state=FSMAdmin.mailing)
async def mailing(message: types.Message):
    users = bot.users.copy()
    users.remove(message.from_user.id)
    count = 0
    for user_id in users:
        try:
            await bot.send_message(chat_id=user_id,
                                   text=message.html_text,
                                   parse_mode="HTML")
            count += 1
        except BotBlocked:
            await User.deactivate(user_id)

    await message.answer(text=f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    if len(users) - count:
        await message.answer(text=f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É {len(users) - count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    await main_admin(message)


@dispatcher.message_handler(Text(contains="–û–±–Ω–æ–≤–∏—Ç—å —Å –ø–æ—á—Ç—ã"), state=FSMAdmin.schedule)
async def imap_update(message: types.Message):
    start_message = await message.answer(text="–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    try:
        await bot.update_schedules()
        await message.answer(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as ex:
        await message.answer(
            text=f"<b>[ERROR]</b> {ex}",
            parse_mode=types.ParseMode.HTML)
        raise ex
    await start_message.delete()
